#!/usr/bin/python3

# enum_path.py
# uses edge descriptors generated by companion script enum_edge.py to draw a config space (coarse-grained by the number of unbound monomers and number of bonds in a given microstate) and create the 

from matplotlib import rc
import matplotlib.pyplot as plt
import networkx as nx
import numpy as np
import sys

rc('font', **{'family': 'serif', 'serif': ['Computer Modern']})
rc('text', usetex=True)

try:
    L = int(sys.argv[1])
    f = open(sys.argv[2])
    imgname = sys.argv[3]
except:
    print('Syntax: plot_edge L input_filename output_filename')
    sys.exit()

print('Reading', sys.argv[1], '...', end=' ')

data = f.read()
print('Done.\nPlotting', imgname, '...', end=' ')
print('\n')
data = np.fromstring(data[data.find('\n'):], dtype=int, sep=' ')
nt = int(np.size(data)/5)   # number of transitions
data = np.reshape(data, (nt, 5))

vtx_radius  = 0.1
axmin       = np.min(data[:,0:4])
axmax       = np.max(data[:,0:4]);
axrange     = axmax - axmin
axmin       -= 2*vtx_radius
axmax       += 2*vtx_radius
scale       = 1
dims        = (scale*axrange, scale*axrange)

fig = plt.figure(figsize=dims)
ax = fig.add_subplot(111)

def intp(start, end, ratio):
    return start + ratio*(end-start)

V = []

G = nx.Graph()

for it in range(0, nt):
    
    from_nlnk   = data[it,0]                # number of bonds (total) in origin
    from_nbnd   = data[it,1]                # number of bound monomers in origin
    to_nlnk     = data[it,2]                # number of bonds (total) in destination
    to_nbnd     = data[it,3]                # number of bound monomers in destination
    
    vertex_from = {'pos': (from_nbnd, from_nlnk), 'visited': False}
    vertex_to   = {'pos': (to_nbnd, to_nlnk), 'visited': False}

    add_from    = True
    add_to      = True
    
    for v in V:
        if v == vertex_from:
            add_from    = False
            continue
        if v == vertex_to:
            add_to      = False
            continue

    if add_from:    V.append(vertex_from)
    if add_to:      V.append(vertex_to)


sys.exit()

for it in range(0, nt):
    
    from_nlnk   = data[it,0]
    from_nbnd   = data[it,1]
    to_nlnk     = data[it,2]
    to_nbnd     = data[it,3]
    mult        = data[it,4]
    
    ax.plot([from_nbnd, to_nbnd], [from_nlnk, to_nlnk], 'k', linewidth=2)
    
    circ_from = plt.Circle((from_nbnd, from_nlnk), vtx_radius, color='g')
    circ_to = plt.Circle((to_nbnd, to_nlnk), vtx_radius, color='g')
    ax.add_artist(circ_from)
    ax.add_artist(circ_to)
    
plt.axis('square')
plt.axis([axmin, axmax, axmax, axmin])
ax.invert_yaxis()

plt.xlabel(r'Number of bound monomers')
plt.ylabel(r'Number of bonds')

plt.grid()

fig.savefig(imgname, bbox_inches='tight')
print('Done.')
